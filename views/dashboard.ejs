<%- include('partials/header') %>

<!-- Add notification container -->
<div class="notification-container"></div>

<!-- Rest of your dashboard content -->
<section class="container my-4">
    <section class="row g-4">
        <section class="col-md-6">
            <section class="card">
                <section class="card-body">
                    <h3 class="card-title">Account Balance</h3>
                    <h2 class="display-4" id="balance">$<%= parseFloat(user.balance).toFixed(2) %></h2>
                </section>
            </section>
        </section>
        
        <section class="col-md-6">
            <section class="card">
                <section class="card-body">
                    <h3 class="card-title">Quick Transaction</h3>
                    <form id="transactionForm">
                        <section class="mb-3">
                            <label class="form-label">Transaction Type</label>
                            <select class="form-select" id="transactionType" required>
                                <option value="deposit">Deposit</option>
                                <option value="withdrawal">Withdrawal</option>
                            </select>
                        </section>
                        <section class="mb-3">
                            <label class="form-label">Amount</label>
                            <input type="number" class="form-control" id="amount" step="0.01" min="0.01" required>
                        </section>
                        <section class="mb-3">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control" id="description" required>
                        </section>
                        <button type="submit" class="btn btn-primary">Submit Transaction</button>
                    </form>
                </section>
            </section>
        </section>

        <section class="col-12">
            <section class="card">
                <section class="card-body">
                    <h3 class="card-title">Recent Transactions</h3>
                    
                    <!-- Add Filter and Search Controls -->
                    <div class="mb-3">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary active" data-filter="all">All</button>
                            <button type="button" class="btn btn-outline-success" data-filter="deposit">Deposits</button>
                            <button type="button" class="btn btn-outline-danger" data-filter="withdrawal">Withdrawals</button>
                        </div>
                        <input type="text" id="searchTransactions" class="form-control mt-2" placeholder="Search transactions...">
                    </div>

                    <section class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Description</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="transactionsTableBody">
                                <% if (locals.transactions && transactions.length > 0) { %>
                                    <% transactions.forEach(function(transaction) { %>
                                        <tr data-type="<%= transaction.type %>" data-id="<%= transaction.id %>">
                                            <td><%= new Date(transaction.createdAt).toLocaleString() %></td>
                                            <td><%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %></td>
                                            <td>$<%= parseFloat(transaction.amount).toFixed(2) %></td>
                                            <td>
                                                <%= transaction.description %>
                                                <% if (transaction.edited) { %>
                                                    <small class="text-muted d-block">
                                                        <i class="bi bi-pencil-square"></i> Edited
                                                    </small>
                                                <% } %>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-outline-primary edit-transaction-btn">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="4" class="text-center">No transactions found</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </section>
                </section>
            </section>
        </section>
    </section>
</section>

<!-- Add this modal after your existing content but before scripts -->
<div class="modal fade" id="editTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editTransactionForm">
                    <input type="hidden" id="editTransactionId">
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <select class="form-select" id="editType" disabled>
                            <option value="deposit">Deposit</option>
                            <option value="withdrawal">Withdrawal</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" class="form-control" id="editAmount" step="0.01" min="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" id="editDescription" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Edit Reason</label>
                        <input type="text" class="form-control" id="editReason" required 
                               placeholder="Briefly explain why you're editing this transaction">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEditBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script src="/js/notifications.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
  // Socket.io implementation
  const socket = io();

  // Listen for 'balanceUpdate' events
  socket.on('balanceUpdate', (data) => {
    const balanceElement = document.getElementById('balance');
    balanceElement.textContent = `$${parseFloat(data.newBalance).toFixed(2)}`;
  });

  // Listen for 'newTransaction' events
  socket.on('newTransaction', (transaction) => {
    const transactionsTable = document.getElementById('recentTransactions');
    const newRow = transactionsTable.insertRow(0);
    
    newRow.innerHTML = `
      <td>${new Date(transaction.createdAt).toLocaleString()}</td>
      <td>${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}</td>
      <td>$${parseFloat(transaction.amount).toFixed(2)}</td>
      <td>${transaction.description}</td>
    `;

    // Remove the last row if there are more than 5 transactions
    if (transactionsTable.rows.length > 5) {
      transactionsTable.deleteRow(transactionsTable.rows.length - 1);
    }
  });
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const transactionForm = document.getElementById('transactionForm');
    const balanceDisplay = document.getElementById('balance');
    const transactionsTableBody = document.getElementById('transactionsTableBody');

    // Handle form submission
    transactionForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        try {
            const formData = {
                type: document.getElementById('transactionType').value,
                amount: parseFloat(document.getElementById('amount').value),
                description: document.getElementById('description').value
            };

            if (isNaN(formData.amount) || formData.amount <= 0) {
                throw new Error('Please enter a valid amount');
            }

            const response = await fetch('/api/transaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Transaction failed');
            }

            // Update balance display
            balanceDisplay.textContent = `$${parseFloat(result.newBalance).toFixed(2)}`;

            // Create new transaction row
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${new Date(result.transaction.createdAt).toLocaleString()}</td>
                <td>${result.transaction.type.charAt(0).toUpperCase() + result.transaction.type.slice(1)}</td>
                <td>$${parseFloat(result.transaction.amount).toFixed(2)}</td>
                <td>${result.transaction.description}</td>
            `;

            // Insert the new row at the beginning of the table
            if (transactionsTableBody) {
                // Remove "No transactions found" row if it exists
                if (transactionsTableBody.querySelector('td[colspan="4"]')) {
                    transactionsTableBody.innerHTML = '';
                }

                // Insert new row at the beginning
                transactionsTableBody.insertBefore(newRow, transactionsTableBody.firstChild);

                // Remove last row if more than 5 transactions
                const rows = transactionsTableBody.getElementsByTagName('tr');
                if (rows.length > 5) {
                    transactionsTableBody.removeChild(rows[rows.length - 1]);
                }
            }

            // Reset form
            transactionForm.reset();

            // Show success message
            showNotification('Transaction successful!', 'success');
        } catch (error) {
            console.error('Transaction error:', error);
            showNotification(error.message || 'Transaction failed', 'error');
        }
    });

    // Socket.IO event handlers
    const socket = io();

    socket.on('transactionComplete', (data) => {
        if (balanceDisplay) {
            balanceDisplay.textContent = `$${parseFloat(data.newBalance).toFixed(2)}`;
        }

        if (transactionsTableBody && data.transaction) {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${new Date(data.transaction.createdAt).toLocaleString()}</td>
                <td>${data.transaction.type.charAt(0).toUpperCase() + data.transaction.type.slice(1)}</td>
                <td>$${parseFloat(data.transaction.amount).toFixed(2)}</td>
                <td>${data.transaction.description}</td>
            `;

            transactionsTableBody.insertBefore(newRow, transactionsTableBody.firstChild);
            
            const rows = transactionsTableBody.getElementsByTagName('tr');
            if (rows.length > 5) {
                transactionsTableBody.removeChild(rows[rows.length - 1]);
            }
        }
    });

    // Add transaction filtering functionality
    const filterButtons = document.querySelectorAll('[data-filter]');
    const searchInput = document.getElementById('searchTransactions');
    const transactionRows = document.querySelectorAll('#transactionsTableBody tr[data-type]');

    function filterTransactions() {
        const activeFilter = document.querySelector('[data-filter].active').dataset.filter;
        const searchTerm = searchInput.value.toLowerCase();

        transactionRows.forEach(row => {
            const type = row.dataset.type;
            const text = row.textContent.toLowerCase();
            const matchesFilter = activeFilter === 'all' || type === activeFilter;
            const matchesSearch = text.includes(searchTerm);
            row.style.display = matchesFilter && matchesSearch ? '' : 'none';
        });
    }

    // Filter button click handlers
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            filterTransactions();
        });
    });

    // Search input handler
    searchInput.addEventListener('input', filterTransactions);

    // Update the transaction table with new row
    function addNewTransaction(transaction) {
        const newRow = document.createElement('tr');
        newRow.dataset.type = transaction.type;
        newRow.dataset.id = transaction.id;
        newRow.innerHTML = `
            <td>${new Date(transaction.createdAt).toLocaleString()}</td>
            <td>${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}</td>
            <td>$${parseFloat(transaction.amount).toFixed(2)}</td>
            <td>${transaction.description}</td>
            <td>
                <button type="button" class="btn btn-sm btn-outline-primary edit-transaction-btn">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            </td>
        `;

        const tbody = document.getElementById('transactionsTableBody');
        const noTransactionsRow = tbody.querySelector('td[colspan="4"]')?.parentElement;
        if (noTransactionsRow) {
            tbody.removeChild(noTransactionsRow);
        }

        tbody.insertBefore(newRow, tbody.firstChild);
        filterTransactions();

        if (tbody.children.length > 5) {
            tbody.removeChild(tbody.children[tbody.children.length - 1]);
        }
    }

    // Update the socket.io handler to use the new addNewTransaction function
    socket.on('transactionComplete', (data) => {
        if (balanceDisplay) {
            balanceDisplay.textContent = `$${parseFloat(data.newBalance).toFixed(2)}`;
        }
        if (data.transaction) {
            addNewTransaction(data.transaction);
        }
    });
});
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Initialize Bootstrap modal
    const editModal = new bootstrap.Modal(document.getElementById('editTransactionModal'));
    const editForm = document.getElementById('editTransactionForm');
    const saveEditBtn = document.getElementById('saveEditBtn');

    // Handle edit button clicks
    document.addEventListener('click', (e) => {
        const editBtn = e.target.closest('.edit-transaction-btn');
        if (editBtn) {
            const row = editBtn.closest('tr');
            const id = row.dataset.id;
            const type = row.dataset.type;
            const amount = row.cells[2].textContent.replace('$', '').trim();
            const description = row.cells[3].textContent.trim();

            // Populate modal
            document.getElementById('editTransactionId').value = id;
            document.getElementById('editType').value = type;
            document.getElementById('editAmount').value = amount;
            document.getElementById('editDescription').value = description;
            document.getElementById('editReason').value = '';

            editModal.show();
        }
    });

    // Handle save button click
    saveEditBtn.addEventListener('click', async () => {
        try {
            const id = document.getElementById('editTransactionId').value;
            const formData = {
                amount: parseFloat(document.getElementById('editAmount').value),
                description: document.getElementById('editDescription').value,
                editReason: document.getElementById('editReason').value
            };

            if (!formData.editReason) {
                throw new Error('Please provide a reason for editing');
            }

            const response = await fetch(`/api/transaction/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error);
            }

            // Update UI
            const row = document.querySelector(`tr[data-id="${id}"]`);
            if (row) {
                row.cells[2].textContent = `$${parseFloat(formData.amount).toFixed(2)}`;
                row.cells[3].innerHTML = `
                    ${formData.description}
                    <small class="text-muted d-block">
                        <i class="bi bi-pencil-square"></i> Edited
                    </small>
                `;
            }

            // Update balance if provided
            if (result.newBalance !== undefined) {
                const balanceElement = document.getElementById('balance');
                if (balanceElement) {
                    balanceElement.textContent = `$${parseFloat(result.newBalance).toFixed(2)}`;
                }
            }

            editModal.hide();
            showNotification('Transaction updated successfully', 'success');
        } catch (error) {
            console.error('Edit error:', error);
            showNotification(error.message, 'error');
        }
    });
});
</script>

<%- include('partials/footer') %>